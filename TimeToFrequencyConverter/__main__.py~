import sys
import numpy as np
#import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Set the backend to Agg (non-interactive)

import matplotlib.pyplot as plt
from ROOT import TCanvas, gROOT, TGraph, TApplication,TH1F, gPad, gStyle
gROOT.SetBatch(True)
def ReadTimeData(SimulatedData):
    """
    Read time data from a file and convert it to a list of simulated_data values.

    Parameters:
    - SimulatedData (str): The name of the file containing the simulated data.

    Returns:
    - list: A list of simulated_data values.
    """
    # Read time data
    try:
        with open(SimulatedData, "r") as file:
            lines = file.readlines()
    except FileNotFoundError:
        print(f"### Error: File '{SimulatedData}' not found.")
        sys.exit(1)
    except Exception as e:
        print(f"### Error opening file '{SimulatedData}': {e}")
        sys.exit(1)
    # Store all simulated_data values in a list
    simulated_datas = []
    # Convert time data to frequency
    #for line in lines:
    for line_num, line in enumerate(lines):
         try:
             # Convert each line of data to a list
             data = eval(line.strip())
             # Get time data (assuming time is in the third column of each line)
             simulated_data = float(data[2])/1e9
             # Append simulated_data to the list
             simulated_datas.append(simulated_data)
         except (ValueError, IndexError, TypeError) as e:
             print(f"### Error processing line: {line.strip()}. Details: {e}")    
    return simulated_datas

def generate_sampling_amplitudes(simulated_data, sample_rate=20e6, signal_width = 100e-12):
    """
    Generate time inputs based on simulated data.

    Parameters:
    - simulated_data (list): List of simulated data points.
    - sample_rate (float): Sampling rate in Hertz. Default is 20MHz.

    Returns:
    - np.ndarray: Time inputs array.
    """
    time_step = 1/ sample_rate
    sampling_time_max = simulated_data[-1]
    sampling_points = int(sampling_time_max/time_step)
    sampling_amplitudes = [0] * sampling_points
    
    for center_time in simulated_data:
        # Assume each data point represents a Gaussian signal
        i_min = max(int((center_time - 5*signal_width)/time_step),0)
        i_max = min(int((center_time + 5*signal_width)/time_step),sampling_points-1)
        print("center_time: ", center_time," i_min: ",i_min," i_max: ",i_max)
        for i in range (i_min, i_max):
            sampling_time = i * time_step
            sampling_amplitude = (1 / (np.sqrt(2 * np.pi) * signal_width)) * np.exp(-0.5 * ((sampling_time - center_time) / signal_width) ** 2)
            sampling_amplitudes[i] = sampling_amplitudes[i] + sampling_amplitude
    return np.array(sampling_amplitudes)

def generate_sampling_amplitudes_sin(sample_rate):
    """
    Generate time inputs based on simulated data.
    
    Parameters:
    - sample_rate (float): Sampling rate in Hertz. Default is 20MHz.
    
    Returns:
    - np.ndarray: Time inputs array.
    """
    time_step = 1/ sample_rate
    sampling_points = int(100/time_step)
    sampling_amplitudes = np.zeros(sampling_points)  # Initialize an array with zeros
    for i in range(0,sampling_points):
        sampling_time      = i *time_step
        sampling_amplitude = np.sin(2 * np.pi * 0.2 * sampling_time)  # Example sine function, adjust as needed
        sampling_amplitudes[i] = sampling_amplitude
    return sampling_amplitudes

def convert_to_frequency(sampling_amplitudes, sample_rate):
    """
    Convert a list of time points to a list of frequencies using FFT.

    Parameters:
    - sampling_amplitudes (list): A list of time points.
    - sample_rate (float): The rate at which the signal is sampled.

    Returns:
    - list: A list of corresponding frequencies.
    """
    # Calculate the number of samples
    num_samples = len(sampling_amplitudes)

    # Perform FFT on the sampling_amplitudes
    fft_result = np.fft.fft(sampling_amplitudes)

    # Calculate the frequencies corresponding to the FFT result
    frequencies = np.fft.fftfreq(num_samples, 1.0 / sample_rate)
    
    # Return the frequencies
    return frequencies, fft_result

def plot_spectrum(sample_rate, sampling_amplitudes, frequencies, fft_result):
    """
    Plot the frequency spectrum.

    Parameters:
    - sampling_amplitudes
    - fft_result (np.ndarray): The FFT result.
    - sample_rate (float): The sample rate.
    """
    time_step = 1/ sample_rate
    sampling_times = [i * time_step for i in range(len(sampling_amplitudes))]
    # Create a figure with two subplots (1 row, 2 columns), and plot in the first subplot (index 1)
    fig, axs = plt.subplots(2, 1)
    axs[0].scatter(sampling_times, sampling_amplitudes, label='Sampling Amplitudes', marker='o', color='b')
    axs[0].set_xlabel('Time (s)')
    axs[0].set_ylabel('Amplitude')
    axs[0].set_title('Sampling Amplitudes vs. Time')
    axs[0].legend()
    # Fine-tune the layout to avoid overlapping titles
    plt.subplots_adjust(hspace=0.5)  # Adjust the vertical spacing between subplots
    # Plot FFT result magnitude with bars and set y-axis to log scale
    axs[1].bar(frequencies, np.abs(fft_result), color='b', alpha=0.7, label='FFT Result')
    # Set x-axis limits to the range [0, 10]
    axs[1].set_xlim([0, 10])
    axs[1].set_xlabel('Frequency [Hz]')
    axs[1].set_yscale('log')  # Set y-axis to log scale    
    axs[1].set_ylim([1e-2, 10])
    axs[1].set_ylabel('Magnitude (log scale)')
    axs[1].set_title('FFT Result')
    axs[1].legend()

    return fig, axs
    
def plot_spectrum_root(sample_rate, sampling_amplitudes, frequencies, fft_result):
    """
    Plot the frequency spectrum.

    Parameters:
    - sampling_amplitudes
    - fft_result (np.ndarray): The FFT result.
    - sample_rate (float): The sample rate.
    """
    time_step = 1/ sample_rate
    g_sampling_amplitude_time = TGraph()
    for i in range(0, len(sampling_amplitudes)):
        sampling_time = i * time_step
        g_sampling_amplitude_time.SetPoint(i, sampling_time, sampling_amplitudes[i])

    fre_N = len(frequencies)
    fre_min = frequencies[int(len(frequencies)/2)]
    fre_max = frequencies[int(len(frequencies)/2)-1]
    print("fre_min:",fre_min," fre_max:",fre_max)
    h_fft_result_frequencies = TH1F("h_fft_result_frequencies","h_fft_result_frequencies",fre_N,fre_min,fre_max)
    for i in range(0,fre_N):
        x = frequencies[i]
        y = np.abs(fft_result[i])
        Nx = h_fft_result_frequencies.GetXaxis().FindBin(x)
        h_fft_result_frequencies.SetBinContent(Nx,y)
        
    canvas = TCanvas("canvas","cavas",0,0,600,600)
    canvas.Divide(1,2)
    canvas.cd(1)
    gPad.SetTopMargin(0.05)
    gPad.SetBottomMargin(0.15)
    gPad.SetRightMargin(0.08)
    
    g_sampling_amplitude_time.Draw("apl")
    g_sampling_amplitude_time.GetXaxis().SetTitle("Time [s]")
    g_sampling_amplitude_time.GetXaxis().CenterTitle()
    g_sampling_amplitude_time.GetXaxis().SetTitleSize(0.06)
    g_sampling_amplitude_time.GetXaxis().SetLabelSize(0.06)
    
    g_sampling_amplitude_time.GetYaxis().SetTitle("Amplitude")
    
    g_sampling_amplitude_time.GetYaxis().CenterTitle()
    g_sampling_amplitude_time.GetYaxis().SetTitleSize(0.06)
    g_sampling_amplitude_time.GetYaxis().SetLabelSize(0.06)
    g_sampling_amplitude_time.GetYaxis().SetTitleOffset(0.8)
    g_sampling_amplitude_time.SetMarkerStyle(20)
    g_sampling_amplitude_time.SetMarkerColor(2)
    g_sampling_amplitude_time.SetMarkerSize(0.5)
    
    canvas.cd(2)
    gPad.SetTopMargin(0.05)
    gPad.SetBottomMargin(0.15)
    gPad.SetRightMargin(0.08)
    gPad.SetLogy(1)
    gStyle.SetOptTitle(0)
    h_fft_result_frequencies.Draw("hist")
    h_fft_result_frequencies.GetXaxis().SetRangeUser(0, sample_rate/2)
    h_fft_result_frequencies.GetXaxis().SetTitle("Frequency [Hz]")
    h_fft_result_frequencies.GetXaxis().CenterTitle()
    h_fft_result_frequencies.GetXaxis().SetTitleSize(0.06)
    h_fft_result_frequencies.GetXaxis().SetLabelSize(0.06)

    #h_fft_result_frequencies.GetYaxis().SetRangeUser(1e3,1e8)
    h_fft_result_frequencies.GetYaxis().SetTitle("Noise power density")
    h_fft_result_frequencies.GetYaxis().CenterTitle()
    h_fft_result_frequencies.GetYaxis().SetTitleSize(0.06)
    h_fft_result_frequencies.GetYaxis().SetLabelSize(0.06)
    h_fft_result_frequencies.GetYaxis().SetTitleOffset(0.8)
    
    return canvas,g_sampling_amplitude_time,h_fft_result_frequencies

def main():
    # Create a TApplication
    #app = TApplication("app", 0, [])
    print("### Welcome to use TimeToFrequencyConverter.")
    if len(sys.argv) != 5:
        print("### Usage: TimeToFrequencyConverter <sample_rate> <signal_width> <SimulatedData>")
        print("### Usage: TimeToFrequencyConverter 20e6, 100e-12 SimulatedData.txt")
        sys.exit(1)
    sampling_method = int(sys.argv[1])
    sample_rate   = float(sys.argv[2])
    signal_width  = float(sys.argv[3])
    SimulatedData = sys.argv[4]
    
    simulated_data = ReadTimeData(SimulatedData)

    if sampling_method == 1:
        sampling_amplitudes = generate_sampling_amplitudes_sin(sample_rate)
    else:
        sampling_amplitudes = generate_sampling_amplitudes(simulated_data,sample_rate, signal_width)
    
    frequencies, fft_result = convert_to_frequency(sampling_amplitudes, sample_rate)
    
    canvas,g_sampling_amplitude_time,h_fft_result_frequencies = plot_spectrum_root(sample_rate, sampling_amplitudes, frequencies, fft_result)
    canvas.Print("plot_spectrum_root.png")
if __name__ == "__main__":    
    main()
    
